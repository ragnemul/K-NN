class = as.factor(test$Attrition),
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "No")
pred_prob_fit2 <- predict(fit_knn2, newdata=test, type="prob")
calc_fit2 <- measureit(score = as.numeric(unlist(pred_prob_fit2["Yes"])),
class = as.factor(test$Attrition),
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "No")
calc_fit1
calc_fit2
replace("NaN",calc_fit2,0)
calc_fit2[is.na(calc_fit2)]
calc_fit2[is.na(calc_fit2)] <- 0
calc_fit2
is.na(calc_fit2)
is.na(calc_fit2["FSCR"])
is.na(calc_fit2["FSCR",1])
is.na(calc_fit2[1,"FSCR"])
calc_fit2[is.na(calc_fit2)]<-0
calc_fit2
calc_fit2[1]
calc_fit2[,1]
calc_fit2[1,]
calc_fit2[1:2]
calc_fit2[1,1]
calc_fit2
calc_fit2["FSCR"]
calc_fit2.df <- as.data.frame(calc_fit2)
calc_fit2
as.data.frame(calc_fit2)
as.data.frame(unlist(calc_fit2))
calc_fit2
calc_fit2[!sapply(calc_fit2, is.nan)]
calc_fit2
rapply( calc_fit2, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
calc_fit2 <- rapply( calc_fit2, f=function(x) ifelse(is.inf(x),1,x), how="replace" )
calc_fit2 <- rapply( calc_fit2, f=function(x) ifelse(is.infinite(x),1,x), how="replace" )
calc_fit2
calc_fit2 <- rapply( calc_fit2, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
calc_fit2
calc_fit2 <- measureit(score = as.numeric(unlist(pred_prob_fit2["Yes"])),
class = as.factor(test$Attrition),
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "No")
calc_fit2 <- rapply( calc_fit2, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
calc_fit2 <- rapply( calc_fit2, f=function(x) ifelse(is.infinite(x),1,x), how="replace" )
calc_fit2
TablaCalculos$FSCR[1] <- 0 # Para sobrescribir el NaN que hay en umbral 100%
Grafica <- ggplot(TablaCalculos, aes(x=Cutoff)) +
geom_line(aes(y = FSCR),   size = 1.5, alpha = 0.5) +
labs(x="Umbral", y="Valor F1", title = "Efecto del umbral en el valor F1") +
theme(plot.title = element_text(hjust = 0.5))
ValorMaximoF1 <- max(TablaCalculos$FSCR)
UmbralValorF1 <- TablaCalculos$Cutoff[which(TablaCalculos$FSCR==ValorMaximoF1)]
Grafica + geom_vline(xintercept=UmbralValorF1, linetype="dashed", color="red")
calc_fit <- calc_fit2
calc_fit <- rapply( calc_fit2, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
calc_fit <- rapply( calc_fit2, f=function(x) ifelse(is.infinite(x),1,x), how="replace" )
Grafica <- ggplot(calc_fit, aes(x=Cutoff)) +
geom_line(aes(y = FSCR),   size = 1.5, alpha = 0.5) +
labs(x="Umbral", y="Valor F1", title = "Efecto del umbral en el valor F1") +
theme(plot.title = element_text(hjust = 0.5))
TablaCalculos
calc_fit
calc_fit <- calc_fit2
calc_fit <- rapply( calc_fit2, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
calc_fit <- rapply( calc_fit2, f=function(x) ifelse(is.infinite(x),1,x), how="replace" )
Grafica <- ggplot(calc_fit, aes(x=Cutoff)) +
geom_line(aes(y = FSCR),   size = 1.5, alpha = 0.5) +
labs(x="Umbral", y="Valor F1", title = "Efecto del umbral en el valor F1") +
theme(plot.title = element_text(hjust = 0.5))
class(calc_fit)
calc_fit
as.data.frame(calc_fit)
class(TablaCalculos)
Resultado
TablaCalculos
assign("TablaCalculos", eval(as.name(paste("TablaCalculos", which(Resultado$AUC == max(Resultado$AUC)), sep=""))))
TablaCalculos
assign("TablaCalculos", eval(as.name(paste("TablaCalculos", which(Resultado$AUC == max(Resultado$AUC)), sep=""))))
TablaCalculos
Resultado
which(Resultado$AUC == max(Resultado$AUC))
calc <- as.data.frame(unlist(calc_fit))
calc
Grafica <- ggplot(calc_fit, aes(x=Cutoff)) +
geom_line(aes(y = FSCR),   size = 1.5, alpha = 0.5) +
labs(x="Umbral", y="Valor F1", title = "Efecto del umbral en el valor F1") +
theme(plot.title = element_text(hjust = 0.5))
Grafica <- ggplot(calc, aes(x=Cutoff)) +
geom_line(aes(y = FSCR),   size = 1.5, alpha = 0.5) +
labs(x="Umbral", y="Valor F1", title = "Efecto del umbral en el valor F1") +
theme(plot.title = element_text(hjust = 0.5))
grafica
Grafica
# Cargar librerías (instalar las que haga falta)
library(ROCit) # Para calcular métricas en función del umbral de forma automática
library(caTools) # Para calcular curva ROC y área debajo de la curva
library(ggplot2) # Para visualizar gráficas
setwd('/Users/luismg/Downloads')
# Asegurar que estamos en el directorio de trabajo correcto
getwd() # ¿Me devuelve el directorio correcto?
DatosTest1 <- read.csv('DatosTestCovid1.csv', sep=';')
DatosTest2 <- read.csv('DatosTestCovid2.csv', sep=';')
DatosTest3 <- read.csv('DatosTestCovid3.csv', sep=';')
DatosTest4 <- read.csv('DatosTestCovid4.csv', sep=';')
head(DatosTest1)
DatosTest1$CategoriaReal <- as.factor(DatosTest1$CategoriaReal)
DatosTest2$CategoriaReal <- as.factor(DatosTest2$CategoriaReal)
DatosTest3$CategoriaReal <- as.factor(DatosTest3$CategoriaReal)
DatosTest4$CategoriaReal <- as.factor(DatosTest4$CategoriaReal)
TablaCalculos1 <- measureit(score = DatosTest1$ProbabilidadTest,
class = DatosTest1$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos1 <- as.data.frame(do.call(cbind, TablaCalculos1))
head(round(TablaCalculos1, 3))
TablaCalculos2 <- measureit(score = DatosTest2$ProbabilidadTest,
class = DatosTest2$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos3 <- measureit(score = DatosTest3$ProbabilidadTest,
class = DatosTest3$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos4 <- measureit(score = DatosTest4$ProbabilidadTest,
class = DatosTest4$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos2 <- as.data.frame(do.call(cbind, TablaCalculos2))
TablaCalculos3 <- as.data.frame(do.call(cbind, TablaCalculos3))
TablaCalculos4 <- as.data.frame(do.call(cbind, TablaCalculos4))
head(round(TablaCalculos2, 3))
Grafica <- ggplot() +
geom_line(aes(x = TablaCalculos1$FPR, y = TablaCalculos1$TPR, colour = "Test1"), size = 1.5, alpha = 0.5) +
geom_line(aes(x = TablaCalculos2$FPR, y = TablaCalculos2$TPR, colour = "Test2"), size = 1.5, alpha = 0.5) +
geom_line(aes(x = TablaCalculos3$FPR, y = TablaCalculos3$TPR, colour = "Test3"), size = 1.5, alpha = 0.5) +
geom_line(aes(x = TablaCalculos4$FPR, y = TablaCalculos4$TPR, colour = "Test4"), size = 1.5, alpha = 0.5) +
scale_colour_manual("",
breaks = c("Test1", "Test2", "Test3", "Test4"),
values = c("green", "blue", "red", "yellow")) +
labs(x="Tasa falsos positivos", y="Tasa verdaderos positivos", title = "Curva ROC") +
theme(plot.title = element_text(hjust = 0.5))
Grafica # Visualizar gráfica en el panel inferior derecha (Plots)
Resultado <- data.frame(matrix(ncol = 1, nrow = 4))
colnames(Resultado) <- "AUC"
Resultado$AUC[1] <- colAUC(X = DatosTest1$ProbabilidadTest, y = DatosTest1$CategoriaReal)
Resultado$AUC[2] <- colAUC(X = DatosTest2$ProbabilidadTest, y = DatosTest2$CategoriaReal)
Resultado$AUC[3] <- colAUC(X = DatosTest3$ProbabilidadTest, y = DatosTest3$CategoriaReal)
Resultado$AUC[4] <- colAUC(X = DatosTest4$ProbabilidadTest, y = DatosTest4$CategoriaReal)
Resultado$AUC <- round(Resultado$AUC, 3)
Texto <- paste("Área test 1 = ", as.character(Resultado$AUC[1]), "\n",
"Área test 2 = ", as.character(Resultado$AUC[2]), "\n",
"Área test 3 = ", as.character(Resultado$AUC[3]), "\n",
"Área test 4 = ", as.character(Resultado$AUC[4]))
Grafica <- Grafica + annotate("text", x=0.75, y=0.25, label = Texto)
Grafica # Mostrar gráfica
FilaTestMayorADC <- which(Resultado$AUC == max(Resultado$AUC))
ValorAreaTest <- round(max(Resultado$AUC),3)
cat("El test", FilaTestMayorADC, "es el que mayor ADC tiene:", ValorAreaTest)
TablaCalculos$FSCR[1] <- 0 # Para sobrescribir el NaN que hay en umbral 100%
TablaCalculos
TablaCalculos$FSCR[1] <- 0 # Para sobrescribir el NaN que hay en umbral 100%
TablaCalculos
# Cargar librerías (instalar las que haga falta)
library(ROCit) # Para calcular métricas en función del umbral de forma automática
library(caTools) # Para calcular curva ROC y área debajo de la curva
library(ggplot2) # Para visualizar gráficas
setwd('/Users/luismg/Downloads')
# Asegurar que estamos en el directorio de trabajo correcto
getwd() # ¿Me devuelve el directorio correcto?
DatosTest1 <- read.csv('DatosTestCovid1.csv', sep=';')
DatosTest2 <- read.csv('DatosTestCovid2.csv', sep=';')
DatosTest3 <- read.csv('DatosTestCovid3.csv', sep=';')
DatosTest4 <- read.csv('DatosTestCovid4.csv', sep=';')
head(DatosTest1)
DatosTest1$CategoriaReal <- as.factor(DatosTest1$CategoriaReal)
DatosTest2$CategoriaReal <- as.factor(DatosTest2$CategoriaReal)
DatosTest3$CategoriaReal <- as.factor(DatosTest3$CategoriaReal)
DatosTest4$CategoriaReal <- as.factor(DatosTest4$CategoriaReal)
TablaCalculos1 <- measureit(score = DatosTest1$ProbabilidadTest,
class = DatosTest1$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos1 <- as.data.frame(do.call(cbind, TablaCalculos1))
head(round(TablaCalculos1, 3))
TablaCalculos2 <- measureit(score = DatosTest2$ProbabilidadTest,
class = DatosTest2$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos3 <- measureit(score = DatosTest3$ProbabilidadTest,
class = DatosTest3$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos4 <- measureit(score = DatosTest4$ProbabilidadTest,
class = DatosTest4$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos2 <- as.data.frame(do.call(cbind, TablaCalculos2))
TablaCalculos3 <- as.data.frame(do.call(cbind, TablaCalculos3))
TablaCalculos4 <- as.data.frame(do.call(cbind, TablaCalculos4))
head(round(TablaCalculos2, 3))
Grafica <- ggplot() +
geom_line(aes(x = TablaCalculos1$FPR, y = TablaCalculos1$TPR, colour = "Test1"), size = 1.5, alpha = 0.5) +
geom_line(aes(x = TablaCalculos2$FPR, y = TablaCalculos2$TPR, colour = "Test2"), size = 1.5, alpha = 0.5) +
geom_line(aes(x = TablaCalculos3$FPR, y = TablaCalculos3$TPR, colour = "Test3"), size = 1.5, alpha = 0.5) +
geom_line(aes(x = TablaCalculos4$FPR, y = TablaCalculos4$TPR, colour = "Test4"), size = 1.5, alpha = 0.5) +
scale_colour_manual("",
breaks = c("Test1", "Test2", "Test3", "Test4"),
values = c("green", "blue", "red", "yellow")) +
labs(x="Tasa falsos positivos", y="Tasa verdaderos positivos", title = "Curva ROC") +
theme(plot.title = element_text(hjust = 0.5))
Grafica # Visualizar gráfica en el panel inferior derecha (Plots)
Resultado <- data.frame(matrix(ncol = 1, nrow = 4))
colnames(Resultado) <- "AUC"
Resultado$AUC[1] <- colAUC(X = DatosTest1$ProbabilidadTest, y = DatosTest1$CategoriaReal)
Resultado$AUC[2] <- colAUC(X = DatosTest2$ProbabilidadTest, y = DatosTest2$CategoriaReal)
Resultado$AUC[3] <- colAUC(X = DatosTest3$ProbabilidadTest, y = DatosTest3$CategoriaReal)
Resultado$AUC[4] <- colAUC(X = DatosTest4$ProbabilidadTest, y = DatosTest4$CategoriaReal)
Resultado$AUC <- round(Resultado$AUC, 3)
Texto <- paste("Área test 1 = ", as.character(Resultado$AUC[1]), "\n",
"Área test 2 = ", as.character(Resultado$AUC[2]), "\n",
"Área test 3 = ", as.character(Resultado$AUC[3]), "\n",
"Área test 4 = ", as.character(Resultado$AUC[4]))
Grafica <- Grafica + annotate("text", x=0.75, y=0.25, label = Texto)
Grafica # Mostrar gráfica
FilaTestMayorADC <- which(Resultado$AUC == max(Resultado$AUC))
ValorAreaTest <- round(max(Resultado$AUC),3)
cat("El test", FilaTestMayorADC, "es el que mayor ADC tiene:", ValorAreaTest)
assign("TablaCalculos", eval(as.name(paste("TablaCalculos", which(Resultado$AUC == max(Resultado$AUC)), sep=""))))
TablaCalculos$Cutoff[1] <- 1
Grafica <- ggplot(TablaCalculos, aes(x=Cutoff)) +
geom_line(aes(y = SENS, colour = "Sensibilidad"),    size = 1.5, alpha = 0.5) +
geom_line(aes(y = SPEC, colour = "Especificidad"),   size = 1.5, alpha = 0.5) +
geom_line(aes(y = PREC, colour = "Precisión"),       size = 1.5, alpha = 0.5) +
geom_line(aes(y = NPV,  colour = "Val. Pred. Neg."), size = 1.5, alpha = 0.5) +
geom_line(aes(y = ACC,  colour = "Exactitud"),       size = 1.5, alpha = 0.5) +
scale_colour_manual("",
breaks = c("Sensibilidad", "Especificidad", "Precisión", "Val. Pred. Neg.", "Exactitud"),
values = c("green", "blue", "red", "yellow", "cyan")) +
labs(x="Umbral", y="Métrica", title = "Efecto del umbral en las métricas") +
theme(plot.title = element_text(hjust = 0.5))
Grafica # Mostrar gráfica (ignorar los Warning que salen)
TablaCalculos
assign("TablaCalculos", eval(as.name(paste("TablaCalculos", which(Resultado$AUC == max(Resultado$AUC)), sep=""))))
TablaCalculos
TablaCalculos$Cutoff[1] <- 1
Grafica <- ggplot(TablaCalculos, aes(x=Cutoff)) +
geom_line(aes(y = SENS, colour = "Sensibilidad"),    size = 1.5, alpha = 0.5) +
geom_line(aes(y = SPEC, colour = "Especificidad"),   size = 1.5, alpha = 0.5) +
geom_line(aes(y = PREC, colour = "Precisión"),       size = 1.5, alpha = 0.5) +
geom_line(aes(y = NPV,  colour = "Val. Pred. Neg."), size = 1.5, alpha = 0.5) +
geom_line(aes(y = ACC,  colour = "Exactitud"),       size = 1.5, alpha = 0.5) +
scale_colour_manual("",
breaks = c("Sensibilidad", "Especificidad", "Precisión", "Val. Pred. Neg.", "Exactitud"),
values = c("green", "blue", "red", "yellow", "cyan")) +
labs(x="Umbral", y="Métrica", title = "Efecto del umbral en las métricas") +
theme(plot.title = element_text(hjust = 0.5))
Grafica # Mostrar gráfica (ignorar los Warning que salen)
TablaCalculos$FSCR[1] <- 0 # Para sobrescribir el NaN que hay en umbral 100%
class(TablaCalculos)
class(calc)
# Load in the data
library(caret)
# stall.packages('ROCit')
library(ROCit) # Para calcular métricas en función del umbral de forma automática
library(caTools) # Para calcular curva ROC y área debajo de la curva
# Establecemos el directorio desde donde trabajaremos para cargar los ficheros de datos
setwd("/Users/luismg/Library/CloudStorage/GoogleDrive-ragnemul@gmail.com/My Drive/Comillas/MABA/KNN/Ejercicios/Ejercicio 4.2")
data.df = read.csv("IBM-HR-Employee-Attrition.csv")
data <- subset(data.df, select = -c(EmployeeCount,StandardHours,Over18,EmployeeNumber) )
sum(is.na(data))
summary(data.df)
# Factorización de valores categóricos
data$MaritalStatus <- as.factor(data$MaritalStatus)
data$EducationField <- as.factor(data$EducationField)
data$Department <- as.factor(data$Department)
data$BusinessTravel <- as.factor(data$BusinessTravel)
data$Gender <- as.factor(data$Gender)
data$JobRole <- as.factor(data$JobRole)
data$OverTime <- as.factor(data$OverTime)
set.seed(123)
#Perform train / test split on the data
train_split_idx <- caret::createDataPartition(data$Attrition, p = 0.8, list = FALSE)
train <- data[train_split_idx, ]
test <- data[-train_split_idx, ]
fitControl1 <- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
sampling = "smote",
summaryFunction = twoClassSummary,
savePredictions = TRUE)
fit_knn1 <- caret::train(Attrition ~ .,
data=train,
method="knn",
trControl = fitControl1,
preProcess = c("range"),
metric = "Sens",
tuneGrid = expand.grid(k = 1:50))
plot(fit_knn1)
#Make predictions to expose class labels
preds_1 <- predict(fit_knn1, newdata=test, type="raw")
confussionMatrix_1 <- caret::confusionMatrix(as.factor(preds_1), as.factor(test$Attrition),positive="Yes")
fitControl2 <- trainControl(method = "repeatedcv",
number = 5,
repeats = 10,
classProbs = TRUE,
sampling = "down",
summaryFunction = twoClassSummary,
savePredictions = TRUE)
fit_knn2 <- caret::train(Attrition ~ .,
data=train,
method="knn",
trControl = fitControl2,
preProcess = c("range"),
metric = "Sens",
tuneGrid = expand.grid(k = 1:50))
plot(fit_knn2)
#Make predictions to expose class labels
preds_2 <- predict(fit_knn2, newdata=test, type="raw")
confussionMatrix_2 <- caret::confusionMatrix(as.factor(preds_2), as.factor(test$Attrition),positive="Yes")
source("ExtractInfoConfusionMatrix.R")
InfoTest1 <- extract_confusion_matrix(cm = confussionMatrix_1) # Devuelve una lista
InfoTest2 <- extract_confusion_matrix(cm = confussionMatrix_2)
TablaResultados <- rbind(as.data.frame(InfoTest1),
as.data.frame(InfoTest2))
TablaResultados
library(plyr)
rocs_fit1 <- llply(unique(fit_knn1$pred$obs), function(cls) {
roc(response = fit_knn1$pred$obs==cls, predictor = fit_knn1$pred[,as.character(cls)])
})
rocs_fit2 <- llply(unique(fit_knn2$pred$obs), function(cls) {
roc(response = fit_knn2$pred$obs==cls, predictor = fit_knn2$pred[,as.character(cls)])
})
plot(rocs_fit1[[1]],print.auc = TRUE, print.auc.y = 0.6, col = "red")
plot(rocs_fit2[[2]],print.auc = TRUE, print.auc.y = 0.55, col = "blue", add=T, )
pred_prob_fit1 <- predict(fit_knn1, newdata=test, type="prob")
calc_fit1 <- measureit(score = as.numeric(unlist(pred_prob_fit1["Yes"])),
class = as.factor(test$Attrition),
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "No")
pred_prob_fit2 <- predict(fit_knn2, newdata=test, type="prob")
calc_fit2 <- measureit(score = as.numeric(unlist(pred_prob_fit2["Yes"])),
class = as.factor(test$Attrition),
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "No")
calc_fit1
calc_fit2
calc_fit1
calc_fit <- calc_fit2
calc_fit <- rapply( calc_fit2, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
calc_fit <- rapply( calc_fit2, f=function(x) ifelse(is.infinite(x),1,x), how="replace" )
calc <- as.data.frame(unlist(calc_fit))
calc
TablaCalculos
View(TablaCalculos)
View(calc)
View(calc_fit)
class(calc_fit)
TablaCalculos2 <- measureit(score = DatosTest2$ProbabilidadTest,
class = DatosTest2$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos3 <- measureit(score = DatosTest3$ProbabilidadTest,
class = DatosTest3$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos4 <- measureit(score = DatosTest4$ProbabilidadTest,
class = DatosTest4$CategoriaReal,
measure = c("TPR", "FPR", "SENS", "SPEC", "PREC", "NPV", "ACC", "FSCR"),
negref = "N")
TablaCalculos2 <- as.data.frame(do.call(cbind, TablaCalculos2))
TablaCalculos3 <- as.data.frame(do.call(cbind, TablaCalculos3))
TablaCalculos4 <- as.data.frame(do.call(cbind, TablaCalculos4))
calc <- as.data.frame(do.call(cbind, calc_fit))
View(calc)
Grafica <- ggplot(calc, aes(x=Cutoff)) +
geom_line(aes(y = FSCR),   size = 1.5, alpha = 0.5) +
labs(x="Umbral", y="Valor F1", title = "Efecto del umbral en el valor F1") +
theme(plot.title = element_text(hjust = 0.5))
Grafica
calc$cost <- calc$FN * FN_cost + calc$FP * FP_cost
FN_cost <- 100
FP_cost <- 1
calc$cost <- calc$FN * FN_cost + calc$FP * FP_cost
min.cost.value <- min(calc$cost)
cost.threshold <- calc$Cutoff[which((calc$cost == min.cost.value))]
Grafica <- ggplot(calc, aes(x=Cutoff)) +
geom_line(aes(y = FSCR),   size = 1.5, alpha = 0.5) +
labs(x="threshold", y="custom func.", title = "threshold effect in custom func.") +
theme(plot.title = element_text(hjust = 0.5))
Grafica
Grafica <- ggplot(calc, aes(x=Cutoff)) +
geom_line(aes(y = cost),   size = 1.5, alpha = 0.5) +
labs(x="threshold", y="custom func.", title = "threshold effect in custom func.") +
theme(plot.title = element_text(hjust = 0.5))
Grafica
FN_cost <- 10
FP_cost <- 1
calc$cost <- calc$FN * FN_cost + calc$FP * FP_cost
min.cost.value <- min(calc$cost)
cost.threshold <- calc$Cutoff[which((calc$cost == min.cost.value))]
Grafica <- ggplot(calc, aes(x=Cutoff)) +
geom_line(aes(y = cost),   size = 1.5, alpha = 0.5) +
labs(x="threshold", y="custom func.", title = "threshold effect in custom func.") +
theme(plot.title = element_text(hjust = 0.5))
Grafica
FN_cost <- 100
FP_cost <- 1
calc$cost <- calc$FN * FN_cost + calc$FP * FP_cost
min.cost.value <- min(calc$cost)
cost.threshold <- calc$Cutoff[which((calc$cost == min.cost.value))]
Grafica <- ggplot(calc, aes(x=Cutoff)) +
geom_line(aes(y = cost),   size = 1.5, alpha = 0.5) +
labs(x="threshold", y="custom func.", title = "threshold effect in custom func.") +
theme(plot.title = element_text(hjust = 0.5))
Grafica
Grafica + geom_vline(xintercept=UmbralCoste, linetype="dashed", color="red")
Grafica + geom_vline(xintercept=cost.threshold, linetype="dashed", color="red")
cat ("Recommended threhold:", round(cost.threshold,2))
FN_cost <- 1
FP_cost <- 1
calc$cost <- calc$FN * FN_cost + calc$FP * FP_cost
min.cost.value <- min(calc$cost)
cost.threshold <- calc$Cutoff[which((calc$cost == min.cost.value))]
threshold.cost.plot <- ggplot(calc, aes(x=Cutoff)) +
geom_line(aes(y = cost),   size = 1.5, alpha = 0.5) +
labs(x="threshold", y="custom func.", title = "threshold effect in custom func.") +
theme(plot.title = element_text(hjust = 0.5))
threshold.cost.plot
Grafica + geom_vline(xintercept=cost.threshold, linetype="dashed", color="red")
FN_cost <- 10
FP_cost <- 1
calc$cost <- calc$FN * FN_cost + calc$FP * FP_cost
min.cost.value <- min(calc$cost)
cost.threshold <- calc$Cutoff[which((calc$cost == min.cost.value))]
threshold.cost.plot <- ggplot(calc, aes(x=Cutoff)) +
geom_line(aes(y = cost),   size = 1.5, alpha = 0.5) +
labs(x="threshold", y="custom func.", title = "threshold effect in custom func.") +
theme(plot.title = element_text(hjust = 0.5))
threshold.cost.plot
Grafica + geom_vline(xintercept=cost.threshold, linetype="dashed", color="red")
# Load in the data
library(caret)
# stall.packages('ROCit')
library(ROCit) # Para calcular métricas en función del umbral de forma automática
library(caTools) # Para calcular curva ROC y área debajo de la curva
# Establecemos el directorio desde donde trabajaremos para cargar los ficheros de datos
setwd("/Users/luismg/Library/CloudStorage/GoogleDrive-ragnemul@gmail.com/My Drive/Comillas/MABA/KNN/Ejercicios/Ejercicio 4.2")
data.df = read.csv("IBM-HR-Employee-Attrition.csv")
data <- subset(data.df, select = -c(EmployeeCount,StandardHours,Over18,EmployeeNumber) )
sum(is.na(data))
summary(data.df)
library(ggplot2)
library(grid)
library(gridExtra)
agePlot <- ggplot(data.df,aes(Age,fill=Attrition))+geom_density()+facet_grid(~Attrition)
travelPlot <- ggplot(data.df,aes(BusinessTravel,fill=Attrition))+geom_bar()
genderPlot <- ggplot(data.df,aes(Gender,fill=Attrition))+geom_bar()
jobLevelPlot <- ggplot(data.df,aes(JobLevel,fill=Attrition))+geom_bar()
jobInvPlot <- ggplot(data.df,aes(JobInvolvement,fill=Attrition))+geom_bar()
marPlot <- ggplot(data.df,aes(MaritalStatus,fill=Attrition))+geom_bar()
numCompPlot <- ggplot(data.df,aes(NumCompaniesWorked,fill=Attrition))+geom_bar()
overTimePlot <- ggplot(data.df,aes(OverTime,fill=Attrition))+geom_bar()
perfPlot <- ggplot(data.df,aes(PerformanceRating,fill = Attrition))+geom_bar()
StockPlot <- ggplot(data.df,aes(StockOptionLevel,fill = Attrition))+geom_bar()
grid.arrange(agePlot,travelPlot,jobLevelPlot,genderPlot,jobInvPlot,marPlot, ncol=2,numCompPlot, overTimePlot, perfPlot, StockPlot,  top = "Fig 1")
# Factorización de valores categóricos
data$MaritalStatus <- as.factor(data$MaritalStatus)
data$EducationField <- as.factor(data$EducationField)
data$Department <- as.factor(data$Department)
data$BusinessTravel <- as.factor(data$BusinessTravel)
data$Gender <- as.factor(data$Gender)
data$JobRole <- as.factor(data$JobRole)
data$OverTime <- as.factor(data$OverTime)
set.seed(123)
#Perform train / test split on the data
train_split_idx <- caret::createDataPartition(data$Attrition, p = 0.8, list = FALSE)
train <- data[train_split_idx, ]
test <- data[-train_split_idx, ]
fitControl1 <- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
sampling = "smote",
summaryFunction = twoClassSummary,
savePredictions = TRUE)
fit_knn1 <- caret::train(Attrition ~ .,
data=train,
method="knn",
trControl = fitControl1,
preProcess = c("range"),
metric = "Sens",
tuneGrid = expand.grid(k = 1:50))
plot(fit_knn1)
fit_knn1
#Make predictions to expose class labels
preds_1 <- predict(fit_knn1, newdata=test, type="raw")
confussionMatrix_1 <- caret::confusionMatrix(as.factor(preds_1), as.factor(test$Attrition),positive="Yes")
fitControl2 <- trainControl(method = "repeatedcv",
number = 5,
repeats = 10,
classProbs = TRUE,
sampling = "down",
summaryFunction = twoClassSummary,
savePredictions = TRUE)
fit_knn2 <- caret::train(Attrition ~ .,
data=train,
method="knn",
trControl = fitControl2,
preProcess = c("range"),
metric = "Sens",
tuneGrid = expand.grid(k = 1:50))
